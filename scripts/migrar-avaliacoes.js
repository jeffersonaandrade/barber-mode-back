require('dotenv').config();

// Tentar importar Supabase, mas n√£o falhar se n√£o estiver configurado
let supabase = null;
try {
  const dbConfig = require('../src/config/database');
  supabase = dbConfig.supabase;
  console.log('‚úÖ Supabase configurado com sucesso');
} catch (error) {
  mostrarInstrucoesManuais();
  process.exit(0);
}

function mostrarInstrucoesManuais() {
  console.log('‚ö†Ô∏è Supabase n√£o configurado ou com problemas');
  console.log('üìã Para configurar o Supabase, adicione as seguintes vari√°veis de ambiente:');
  console.log('   - SUPABASE_URL');
  console.log('   - SUPABASE_ANON_KEY');
  console.log('   - SUPABASE_SERVICE_ROLE_KEY (opcional)');
  console.log('');
  console.log('üîß Ou execute os comandos SQL manualmente no seu banco:');
  console.log('');
  console.log('-- 1. Adicionar colunas rating_estrutura e rating_barbeiro');
  console.log('ALTER TABLE avaliacoes ADD COLUMN IF NOT EXISTS rating_estrutura INTEGER CHECK (rating_estrutura >= 1 AND rating_estrutura <= 5);');
  console.log('ALTER TABLE avaliacoes ADD COLUMN IF NOT EXISTS rating_barbeiro INTEGER CHECK (rating_barbeiro >= 1 AND rating_barbeiro <= 5);');
  console.log('');
  console.log('-- 2. Migrar dados existentes (se houver)');
  console.log('UPDATE avaliacoes SET rating_estrutura = rating, rating_barbeiro = rating WHERE rating_estrutura IS NULL;');
  console.log('');
  console.log('-- 3. Tornar colunas obrigat√≥rias');
  console.log('ALTER TABLE avaliacoes ALTER COLUMN rating_estrutura SET NOT NULL;');
  console.log('ALTER TABLE avaliacoes ALTER COLUMN rating_barbeiro SET NOT NULL;');
  console.log('');
  console.log('üìÑ Ou use o arquivo: scripts/migrar-avaliacoes-manual.sql');
  console.log('');
  console.log('üéâ Ap√≥s executar os comandos SQL, a migra√ß√£o estar√° conclu√≠da!');
}

async function migrarAvaliacoes() {
  try {
    console.log('üîÑ [MIGRA√á√ÉO] Iniciando migra√ß√£o da tabela avaliacoes...');
    
    // 1. Adicionar novas colunas
    console.log('üìù [MIGRA√á√ÉO] Adicionando colunas rating_estrutura e rating_barbeiro...');
    
    const { error: addEstruturaError } = await supabase.rpc('exec_sql', {
      sql: `
        ALTER TABLE avaliacoes 
        ADD COLUMN IF NOT EXISTS rating_estrutura INTEGER CHECK (rating_estrutura >= 1 AND rating_estrutura <= 5)
      `
    });
    
    if (addEstruturaError) {
      console.error('‚ùå [MIGRA√á√ÉO] Erro ao adicionar rating_estrutura:', addEstruturaError.message);
      console.log('üîÑ [MIGRA√á√ÉO] Tentando m√©todo alternativo...');
      
      // Tentar m√©todo alternativo usando SQL direto
      const { error: altError } = await supabase
        .from('avaliacoes')
        .select('id')
        .limit(1);
      
      if (altError && altError.message.includes('rating_estrutura')) {
        console.log('‚ùå [MIGRA√á√ÉO] Colunas ainda n√£o existem. Use migra√ß√£o manual.');
        mostrarInstrucoesManuais();
        return;
      }
    } else {
      console.log('‚úÖ [MIGRA√á√ÉO] Coluna rating_estrutura adicionada');
    }
    
    const { error: addBarbeiroError } = await supabase.rpc('exec_sql', {
      sql: `
        ALTER TABLE avaliacoes 
        ADD COLUMN IF NOT EXISTS rating_barbeiro INTEGER CHECK (rating_barbeiro >= 1 AND rating_barbeiro <= 5)
      `
    });
    
    if (addBarbeiroError) {
      console.error('‚ùå [MIGRA√á√ÉO] Erro ao adicionar rating_barbeiro:', addBarbeiroError.message);
    } else {
      console.log('‚úÖ [MIGRA√á√ÉO] Coluna rating_barbeiro adicionada');
    }
    
    // 2. Migrar dados existentes (se houver)
    console.log('üîÑ [MIGRA√á√ÉO] Migrando dados existentes...');
    
    const { data: avaliacoesExistentes, error: fetchError } = await supabase
      .from('avaliacoes')
      .select('id, rating')
      .is('rating_estrutura', null);
    
    if (fetchError) {
      console.error('‚ùå [MIGRA√á√ÉO] Erro ao buscar avalia√ß√µes existentes:', fetchError.message);
      if (fetchError.message.includes('rating_estrutura')) {
        console.log('‚ùå [MIGRA√á√ÉO] Colunas ainda n√£o existem. Use migra√ß√£o manual.');
        mostrarInstrucoesManuais();
        return;
      }
    } else if (avaliacoesExistentes && avaliacoesExistentes.length > 0) {
      console.log(`üìä [MIGRA√á√ÉO] Encontradas ${avaliacoesExistentes.length} avalia√ß√µes para migrar`);
      
      for (const avaliacao of avaliacoesExistentes) {
        // Migrar rating antigo para rating_estrutura (assumindo que era avalia√ß√£o geral)
        const { error: updateError } = await supabase
          .from('avaliacoes')
          .update({
            rating_estrutura: avaliacao.rating,
            rating_barbeiro: avaliacao.rating // Mesmo valor para manter compatibilidade
          })
          .eq('id', avaliacao.id);
        
        if (updateError) {
          console.error(`‚ùå [MIGRA√á√ÉO] Erro ao migrar avalia√ß√£o ${avaliacao.id}:`, updateError.message);
        } else {
          console.log(`‚úÖ [MIGRA√á√ÉO] Avalia√ß√£o ${avaliacao.id} migrada`);
        }
      }
    } else {
      console.log('‚ÑπÔ∏è [MIGRA√á√ÉO] Nenhuma avalia√ß√£o existente encontrada para migrar');
    }
    
    // 3. Tornar as novas colunas obrigat√≥rias (ap√≥s migra√ß√£o)
    console.log('üîí [MIGRA√á√ÉO] Tornando colunas obrigat√≥rias...');
    
    const { error: notNullError } = await supabase.rpc('exec_sql', {
      sql: `
        ALTER TABLE avaliacoes 
        ALTER COLUMN rating_estrutura SET NOT NULL,
        ALTER COLUMN rating_barbeiro SET NOT NULL
      `
    });
    
    if (notNullError) {
      console.error('‚ùå [MIGRA√á√ÉO] Erro ao tornar colunas obrigat√≥rias:', notNullError.message);
    } else {
      console.log('‚úÖ [MIGRA√á√ÉO] Colunas tornadas obrigat√≥rias');
    }
    
    console.log('üéâ [MIGRA√á√ÉO] Migra√ß√£o conclu√≠da com sucesso!');
    console.log('üìã [MIGRA√á√ÉO] Resumo:');
    console.log('   - ‚úÖ rating_estrutura: adicionada');
    console.log('   - ‚úÖ rating_barbeiro: adicionada');
    console.log('   - ‚úÖ Dados existentes migrados');
    console.log('   - ‚úÖ Colunas tornadas obrigat√≥rias');
    console.log('   - ‚ö†Ô∏è Coluna rating antiga mantida (comentada)');
    
  } catch (error) {
    console.error('‚ùå [MIGRA√á√ÉO] Erro geral na migra√ß√£o:', error.message);
    console.log('');
    console.log('üîÑ [MIGRA√á√ÉO] Usando migra√ß√£o manual...');
    mostrarInstrucoesManuais();
  }
}

// Executar migra√ß√£o se chamado diretamente
if (require.main === module) {
  migrarAvaliacoes();
}

module.exports = { migrarAvaliacoes }; 